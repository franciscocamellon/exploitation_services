/*--- Statistics controller ---*/

import { createMap } from "../Tools.js";
import { getDistricts } from "./DistrictsModel.js";

import * as d3 from "d3";

export let StatsCtrl = {

    navMap: null,
    district: null,
    barChart: null,

    /*- View initialization function -*/
    onViewReady: function () {
        let mapPanel = webix.$$('sts_map');
        mapPanel.getNode().innerHTML = '<div class="nav_map" id="' + mapPanel.config.id + '_div"></div>';
        this.navMap = createMap(mapPanel.config.id);
        this.navMap.getView().setCenter(appdata.cityCoords);
        this.navMap.getView().setZoom(appdata.zoom);

        getDistricts(appdata.cityName).then((response) => {
            console.log(response.json())
            StatsCtrl.district = response.json();
            StatsCtrl.drawBarChart('sts_barchart');
        }, (error) => {
            console.log('getDistricts:' + error);
        });

    },

    /**
     * Draws a population bar chart after the data of the districts has been received.
     * @param {string} targetPanel - The 'id' of the HTML element that will contain the bar chart.
     */
    drawBarChart: function (targetPanel) {
        var bc = new Object;
        bc.panel = webix.$$(targetPanel);
        bc.panel.$view.innerHTML = '<div class="bar_chart" id="' + bc.panel.config.id + '_div"></div>';

        /* Bar chart margins and dimentions */
        bc.margin = { top: 30, right: 20, bottom: 50, left: 60 };
        bc.width = bc.panel.$width - bc.margin.left - bc.margin.right - 1;
        bc.height = bc.panel.$height - bc.margin.top - bc.margin.bottom;

        /* Bar chart object */
        bc.obj = d3.select("#" + bc.panel.config.id + '_div').append("svg")
            .attr("id", "bar_chart")
            .attr("width", bc.width + bc.margin.left + bc.margin.right)
            .attr("height", bc.height + bc.margin.top + bc.margin.bottom)
            .append("g")
            .attr("transform", "translate(" + bc.margin.left + "," + bc.margin.top + ")");

        /* x & y functions */
        bc.x = d3.scaleBand().rangeRound([0, bc.width]).padding(0.1);
        bc.y = d3.scaleLinear().rangeRound([bc.height, 0]);
        bc.x.domain((this.district.map(function (r) { return r.label; })).sort());
        bc.y.domain([0, d3.max(this.district, function (r) { return r.pop_2020; }) * 1.1]);

        /* Population bars */
        bc.obj.selectAll(".bar")
            .data(this.district)
          .enter().append("rect")
            .attr("class", "bar")
            .attr("id", function (r) { return "bar_" + r.code; })
            .attr("x", function (r) { return bc.x(r.label) + bc.x.bandwidth() * .2 / 2; })
            .attr("y", function (r) { return bc.y(r.pop_2020); })
            .attr("width", bc.x.bandwidth() * .8)
            .attr("height", function (r) { return bc.height - bc.y(r.pop_2020); })
            .style("stroke", "#AAA")
            .style("stroke-width", 1)
            .style("fill", "#CACCCE")
            .style("fill-opacity", 0.4);

        /* x axis */
        bc.obj.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + bc.height + ")")
            .call(d3.axisBottom(bc.x))
          .append("text")
            .attr("id", "bc_xaxis_label")
            .attr("x", bc.width/2)
            .attr("y", 35)
            .style("fill", "#404040")
            .style("font-size", "13px")
            .style("font-weight", 400)
            .style("text-anchor", "middle")
            .text("District Codes - (" + appdata.cityName + ")");

        /* y axis */
        bc.obj.append("g")
            .attr("class", "y axis")
            .call(d3.axisLeft(bc.y))
          .append("text")
            .attr("id", "bc_yaxis_label")
            .attr("x", 5)
            .attr("y", -10)
            .style("fill", "#404040")
            .style("font-size", "13px")
            .style("font-weight", 400)
            .style("text-anchor", "start")
            .text("Number of Inhabitants (2020)");

        this.barChart = bc;
    }

};
/*--- ---*/